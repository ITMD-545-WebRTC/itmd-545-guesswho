#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

const {app, io} = require('../app');
const debug = require('debug')('itmd-545-guesswho:server');
const fs = require('fs');



 if (process.env.LOCALHOST_SSL_KEY && process.env.LOCALHOST_SSL_CERT) {
   // Use key locations to run https
   const https = require('https');
   const key = fs.readFileSync(process.env.LOCALHOST_SSL_KEY);
   const cert = fs.readFileSync(process.env.LOCALHOST_SSL_CERT);
   // Cannot use const because of conditional assignment
   var server = https.createServer({key: key, cert: cert }, app);

 } else {
   // Fall back to http if key locations are not defined
   const http = require('http');
   var server = http.createServer(app);
 }

 /**
  * Get port from environment and store in Express.
  */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Attach socket.io to the same server
   */
  io.attach(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
